{"remainingRequest":"/Users/dario/opensource/docz/packages/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/dario/opensource/docz/node_modules/babel-preset-react-app/index.js\",{\"flow\":true}]],\"plugins\":[],\"cacheDirectory\":true,\"babelrc\":false}!/Users/dario/views/docs/Scopes/README.md","dependencies":[{"path":"/Users/dario/views/docs/Scopes/README.md","mtime":1532761906114},{"path":"/Users/dario/opensource/docz/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/dario/opensource/docz/packages/docz-core/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"scope-properties\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h1\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#scope-properties\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Scope properties\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Setting one or multiple conditions on a block will define the way it will render.\\nThere are two ways you can take advantage of the scopes on any given block:\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"To control how a block looks like when rendered in the view\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"To show or hide a block from the view\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Scopes are defined in the logic files, back-end, or via service call.\\nEach scope depends on the value passed to respective slot.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"General syntax rules:\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\"\n  }, \"when\"), \" the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\"\n  }, \"<conditionName\"), \" is true, display\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\"\n  }, \"<!props.conditionName\"), \" is a negation of the value passed to the slot\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"There is a base scope which includes all the properties of the block without\\nleading \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\"\n  }, \"when\"), \" statement.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Properties included in each scope have to also be used in the base scope\\nwith a default value.\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"control-properties-of-blocks-dynamically\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#control-properties-of-blocks-dynamically\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Control properties of blocks dynamically\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Blocks and Views can have many scopes driven by \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" statements.\\nBasic example:\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-views\"\n    }\n  }, \"Button Vertical\\nbackgroundColor white\\nonClick <\\nwhen <isClicked\\nbackgroundColor green\\nLabel Text\\ncolor black\\ntext Click me\\nwhen <isClicked\\ncolor white\\ntext I was clicked\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"This comes handy when you want to change a block on interaction, or when you\\nwant to animate transitions.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"There is a specific structure to a block with \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" properties.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Styling properties positioned directly below the name, and type, of a block become the\\nbase style. They can be changed based on passed slot conditions. From the example above:\\n\", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when <isClicked\"), \" is a condition added to the Button wrapping the Text block.\\nAbove this \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" condition, and as a part of base style, you can position any\\nstyling properties, we use \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"backgroundColor white\"), \".\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Below the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" condition you can overwrite the conditions from the base styles.\\nWe change background color of the button to \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"green\"), \" using \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"backgroundColor green\"), \".\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"There can be any number of the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" conditions within the block you need.\\nAfter adding properties below each \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \", remember to add it also to the base\\nstyle with a default value.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" conditions can be triggered on any basic blocks and custom views.\\nThe \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" property doesn't have to be passed down to the custom view manually.\\nIt will apply automatically. So, this is also valid even though Title view doesn't\\nhave the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when <when\"), \" specified anywhere within the view.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-views\"\n    }\n  }, \"Button Vertical\\nbackgroundColor white\\nonClick <\\nwhen <isClicked\\nbackgroundColor green\\nLabel Text\\ncolor black\\ntext Click me\\nwhen <isClicked\\ncolor white\\ntext I was clicked\\n\\nSubTitle\\nmarginTop 5\\ntext Go for it!\\nwhen <isClicked\\ntext Nicely done!\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"The \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"SubTitle\"), \" view is saved as \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"SubTitle.view\"), \" file and contains on \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"Text\"), \" block\\nwith \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"text\"), \" defined as external slot.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-views\"\n    }\n  }, \"SubTitle Text\\nmarginTop < 10\\ncolor #ffaa00\\nfontFamily Montserrat\\nfontSize 16\\ntext < my text\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"As you see, there is no \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" props in the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"Subtitle\"), \" view but the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"text\"), \" values\\nare changing based on the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"isClicked\"), \" condition specified in \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"Button.view\"), \" file.\\nBy default \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" will get \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"true\"), \" value and will create a new artboard in Views Tools.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Here's the visual result of the conditions above :\\n\", React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"whens-ungly.png\",\n      \"alt\": \"when conditions - ugly\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"hover-states\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#hover-states\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Hover states\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"You also use a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" condition to apply hover states.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\"\n  }, \"CloseButton Vertical\\nbackgroundColor white\\nwhen <hover\\nbackgroundColor blue\\n\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"control-when-blocks-are-renderedshown\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#control-when-blocks-are-renderedshown\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Control when blocks are rendered/shown\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"You can use \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"onWhen\"), \" condition as part of the base scope to act as a rendering\\nswitch, and show or hide the block.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-views\"\n    }\n  }, \"Popup Text\\ntext Yoohoo!\\nonWhen <goesYoohoo\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"At this point slot \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"<goesYoohoo\"), \" expects a boolean value and can be set\\nas true or false in the state of the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \".view.logic.js\"), \" file.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"If you use Views Tools you will see two artboards in the preview with Popup block\\nshown in the first one and not visible in the second, because by default \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"onWhen\"), \"\\nget's \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"false\"), \" value (or strictly \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"undefined\"), \").\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"The Popup will be rendered in the view of the final production build based on the\\nvalue of the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"<goesYoohoo\"), \" passed from the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"Popup.view.logic.js\"), \" file, from\\nthe back-end, or via an API call. By default the Popup will not render.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"to-avoid-errors-make-sure-your-fake-props-comply-with-these-simple-rules\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#to-avoid-errors-make-sure-your-fake-props-comply-with-these-simple-rules\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"To avoid errors, make sure your fake props comply with these simple rules:\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Always start the scope name with a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\"\n  }, \"when\")), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"The name of the scope can have spaces, but not special characters like dashes or parenthesis.\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"javascript-ternaries-and-props-are-no-longer-supported\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#javascript-ternaries-and-props-are-no-longer-supported\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Javascript ternaries and props are no longer supported\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"With the simplification of \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"when\"), \" conditions, ternaries like:\\n\", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"text props.isClicked ? 'Nicely done!' : 'Go for it!'\"), \"\\nare no longer supported.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"With the introduction of slots, props are no longer supported (specifically from\\nthe morpher version 12.0.0)\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Reach out with questions via our \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://slack.viewsdx.com/\"\n    }\n  }, \"Slack Questions Channel\"), \".\\nMention \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"@tom\"), \" or \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, \"@dario\"), \" to make sure that we get your notifications.\"));\n});",{"version":3,"sources":["Scopes/README.md"],"names":["React","MDXTag","components","props"],"mappings":"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","sourceRoot":"/Users/dario/views/docs","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"scope-properties\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"aria-hidden\":true,\"href\":\"#scope-properties\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Scope properties`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Setting one or multiple conditions on a block will define the way it will render.\nThere are two ways you can take advantage of the scopes on any given block:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`To control how a block looks like when rendered in the view`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`To show or hide a block from the view`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Scopes are defined in the logic files, back-end, or via service call.\nEach scope depends on the value passed to respective slot.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`General syntax rules:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`when`}</MDXTag>{` the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`<conditionName`}</MDXTag>{` is true, display`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`<!props.conditionName`}</MDXTag>{` is a negation of the value passed to the slot`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`There is a base scope which includes all the properties of the block without\nleading `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`when`}</MDXTag>{` statement.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Properties included in each scope have to also be used in the base scope\nwith a default value.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"control-properties-of-blocks-dynamically\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#control-properties-of-blocks-dynamically\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Control properties of blocks dynamically`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Blocks and Views can have many scopes driven by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` statements.\nBasic example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-views\"}}>{`Button Vertical\nbackgroundColor white\nonClick <\nwhen <isClicked\nbackgroundColor green\nLabel Text\ncolor black\ntext Click me\nwhen <isClicked\ncolor white\ntext I was clicked\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This comes handy when you want to change a block on interaction, or when you\nwant to animate transitions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There is a specific structure to a block with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` properties.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Styling properties positioned directly below the name, and type, of a block become the\nbase style. They can be changed based on passed slot conditions. From the example above:\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when <isClicked`}</MDXTag>{` is a condition added to the Button wrapping the Text block.\nAbove this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` condition, and as a part of base style, you can position any\nstyling properties, we use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`backgroundColor white`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Below the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` condition you can overwrite the conditions from the base styles.\nWe change background color of the button to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`green`}</MDXTag>{` using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`backgroundColor green`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There can be any number of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` conditions within the block you need.\nAfter adding properties below each `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{`, remember to add it also to the base\nstyle with a default value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` conditions can be triggered on any basic blocks and custom views.\nThe `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` property doesn't have to be passed down to the custom view manually.\nIt will apply automatically. So, this is also valid even though Title view doesn't\nhave the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when <when`}</MDXTag>{` specified anywhere within the view.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-views\"}}>{`Button Vertical\nbackgroundColor white\nonClick <\nwhen <isClicked\nbackgroundColor green\nLabel Text\ncolor black\ntext Click me\nwhen <isClicked\ncolor white\ntext I was clicked\n\nSubTitle\nmarginTop 5\ntext Go for it!\nwhen <isClicked\ntext Nicely done!\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SubTitle`}</MDXTag>{` view is saved as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SubTitle.view`}</MDXTag>{` file and contains on `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Text`}</MDXTag>{` block\nwith `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` defined as external slot.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-views\"}}>{`SubTitle Text\nmarginTop < 10\ncolor #ffaa00\nfontFamily Montserrat\nfontSize 16\ntext < my text\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As you see, there is no `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` props in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Subtitle`}</MDXTag>{` view but the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{` values\nare changing based on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isClicked`}</MDXTag>{` condition specified in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Button.view`}</MDXTag>{` file.\nBy default `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` will get `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{` value and will create a new artboard in Views Tools.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here's the visual result of the conditions above :\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"whens-ungly.png\",\"alt\":\"when conditions - ugly\"}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"hover-states\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#hover-states\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Hover states`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You also use a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` condition to apply hover states.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\">{`CloseButton Vertical\nbackgroundColor white\nwhen <hover\nbackgroundColor blue\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"control-when-blocks-are-renderedshown\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#control-when-blocks-are-renderedshown\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Control when blocks are rendered/shown`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onWhen`}</MDXTag>{` condition as part of the base scope to act as a rendering\nswitch, and show or hide the block.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-views\"}}>{`Popup Text\ntext Yoohoo!\nonWhen <goesYoohoo\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`At this point slot `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<goesYoohoo`}</MDXTag>{` expects a boolean value and can be set\nas true or false in the state of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.view.logic.js`}</MDXTag>{` file.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you use Views Tools you will see two artboards in the preview with Popup block\nshown in the first one and not visible in the second, because by default `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onWhen`}</MDXTag>{`\nget's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{` value (or strictly `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`undefined`}</MDXTag>{`).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The Popup will be rendered in the view of the final production build based on the\nvalue of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<goesYoohoo`}</MDXTag>{` passed from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Popup.view.logic.js`}</MDXTag>{` file, from\nthe back-end, or via an API call. By default the Popup will not render.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"to-avoid-errors-make-sure-your-fake-props-comply-with-these-simple-rules\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#to-avoid-errors-make-sure-your-fake-props-comply-with-these-simple-rules\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`To avoid errors, make sure your fake props comply with these simple rules:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Always start the scope name with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`when`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The name of the scope can have spaces, but not special characters like dashes or parenthesis.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"javascript-ternaries-and-props-are-no-longer-supported\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#javascript-ternaries-and-props-are-no-longer-supported\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Javascript ternaries and props are no longer supported`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the simplification of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`when`}</MDXTag>{` conditions, ternaries like:\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text props.isClicked ? 'Nicely done!' : 'Go for it!'`}</MDXTag>{`\nare no longer supported.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`With the introduction of slots, props are no longer supported (specifically from\nthe morpher version 12.0.0)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Reach out with questions via our `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://slack.viewsdx.com/\"}}>{`Slack Questions Channel`}</MDXTag>{`.\nMention `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`@tom`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`@dario`}</MDXTag>{` to make sure that we get your notifications.`}</MDXTag></MDXTag>\n  "]}]}
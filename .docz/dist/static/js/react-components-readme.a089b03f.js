(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"./ReactComponents/README.md":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),p=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},p=Object.keys(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;r(e,["components"]);return o.a.createElement(p.MDXTag,{name:"wrapper",components:n},o.a.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"views-and-your-react-components"}},o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"h1",props:{"aria-hidden":!0,href:"#views-and-your-react-components"}},o.a.createElement(p.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),"Views and your React components"),o.a.createElement(p.MDXTag,{name:"p",components:n},"If you want to use an existing React component as is, you can import it by\ndefining it as a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".js")," file and adding a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"// @view")," pragma at the top."),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"integration-pattern"}},o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"h2",props:{"aria-hidden":!0,href:"#integration-pattern"}},o.a.createElement(p.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),"Integration pattern"),o.a.createElement(p.MDXTag,{name:"p",components:n},"E.g., say you have a file called ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Magic.js"),":"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"// @view\nimport React from 'react'\n\nexport default props => props.word\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"You can now use that component as you would use any other view in your system:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"Magic\nword hey!\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"We'll be working on bridging NPM modules at some stage, but for now you can\nbridge any external modules by hand."),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"google-maps-integration"}},o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"h2",props:{"aria-hidden":!0,href:"#google-maps-integration"}},o.a.createElement(p.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),"Google Maps integration"),o.a.createElement(p.MDXTag,{name:"p",components:n},"Here's an example with\n",o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://tomchentw.github.io/react-google-maps/"}},"react-google-maps"),"."),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"GoogleMap.js")),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"// @view\nimport { GoogleMap } from 'react-google-maps'\nexport default ({ defaultCenterLat: lat, defaultCenterLng: lng, ...props }) => (\n  <GoogleMap defaultCenter={{ lat, lng }} {...props}>\n    {props.children}\n  </GoogleMap>\n)\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Marker.js")),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"// @view\nimport { Marker } from 'react-google-maps'\nexport default ({ positionLat: lat, positionLng: lng, ...props }) => (\n  <Marker position={{ lat, lng }} {...props} />\n)\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"Then in your view, following ",o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://tomchentw.github.io/react-google-maps/#usage--configuration"}},"the example from their docs"),":"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-views"}},"GoogleMap\ndefaultZoom 0\ndefaultCenterLat -34.397\ndefaultCenterLng 150.644\nMarker\nonWhen <isMarkerShown\npositionLat -34.397\npositionLng 150.644\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"You will notice that we've renamed certain props and flattened them out. In\norder to reduce the complexity of the language we made a decision not to allow\ncomplex objects in views as props for now. This isn't set in stone though, so if\nyou feel strong about it, let us know and we can work to enable a syntax like:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-views"}},"GoogleMap\ndefaultZoom 0\ndefaultCenter\nlat -34.397\nlng 150.644\nMarker\nonWhen <isMarkerShown\nposition\nlat -34.397\nlng 150.644\n")),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"loaders"}},o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"h2",props:{"aria-hidden":!0,href:"#loaders"}},o.a.createElement(p.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),"Loaders"),o.a.createElement(p.MDXTag,{name:"p",components:n},"Create ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Spinner.js")," in your project and add this code to it:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"// @view\nimport * as Spinners from 'react-spinners';\nimport React from 'react';\n\nconst Spinner = ({ type, ...props }) => {\n  const Type = Spinners[type];\n  return <Type loading={true} {...props} />;\n};\nSpinner.defaultProps = {\n  type: 'ClipLoader',\n};\nexport default Spinner;\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"Views Moprher will auto-generate ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Spinner.view.js")," file for you."),o.a.createElement(p.MDXTag,{name:"p",components:n},"You can now use a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Spinner")," block in any view on its own or together with setting a type of spinner:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"Spinner\ntype ClipLoader\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"Here's the link to NPM package with all ",o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://www.npmjs.com/package/react-spinners"}},"spinner options"),"\nAnd here's the ",o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://www.davidhu.io/react-spinners/"}},"demo page")),o.a.createElement(p.MDXTag,{name:"p",components:n},o.a.createElement(p.MDXTag,{name:"img",components:n,parentName:"p",props:{src:"spinners-examples.png",alt:"Some spinners examples"}})),o.a.createElement(p.MDXTag,{name:"p",components:n},"Customise your loader with additional properties:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"Spinner\ntype BarLoader\nwidth 100\nheight 4\ncolor #ff8300\n")),o.a.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"viewfake"}},o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"h2",props:{"aria-hidden":!0,href:"#viewfake"}},o.a.createElement(p.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),".view.fake"),o.a.createElement(p.MDXTag,{name:"p",components:n},"When you add a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".js")," view, our toolset will let you define a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".view.fake")," file\nthat mocks your ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".js")," component. A ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".js")," component like our ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Magic")," or\n",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"GoogleMap")," components above are external and as such can't be modified in\nViews. However, it's handy to have some kind of representation of them in your\npreview. That's when the ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".view.fake")," comes into play. Take ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"GoogleMap")," for\nexample, it's fake view could look like:"),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre"},"GoogleMapFake Image\nsource ./google-map-fake.jpg\n")),o.a.createElement(p.MDXTag,{name:"p",components:n},"Reach out with questions via our ",o.a.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://slack.viewsdx.com/"}},"Slack Questions Channel"),".\nMention ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@tom")," or ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@dario")," to make sure that we get your notifications."))}}}]);